{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('button');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minValue = document.querySelector('[data-minutes]');\nconst secValue = document.querySelector('[data-seconds]');\nclass Timer {\n  constructor(convertMs, selectedDates) {\n    this.intervalId = null;\n    this.collectTime = convertMs;\n  }\n  start() {\n    this.intervalId = setInterval(() => {\n      const diff = this.selectedDates - Date.now();\n      daysValue.textContent = padStart(this.collectTime(diff).days);\n\n      hoursValue.textContent = this.collectTime(diff).hours;\n      minValue.textContent = this.collectTime(diff).minutes;\n      secValue.textContent = this.collectTime(diff).seconds;\n    }, 1000);\n  }\n  cleanInterval() {\n    clearInterval(this.intervalId);\n  }\n}\n\nstartBtn.addEventListener('click', () => {\n  timer.start();\n});\n\nfunction padStart(number) {\n  return number.toString().padStart(2, '0');\n}\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    timer.selectedDates = selectedDates[0];\n    if (timer.selectedDates < Date.now()) {\n      startBtn.disabled = true;\n      iziToast.show({\n        title: 'Hey',\n        message: 'Please choose a date in the future',\n      });\n      console.log(iziToast);\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n};\n\nconst input = document.querySelector('#datetime-picker');\nconst fp = flatpickr('#datetime-picker', options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconst timer = new Timer(convertMs);\n"],"names":["startBtn","daysValue","hoursValue","minValue","secValue","Timer","convertMs","selectedDates","diff","padStart","timer","number","options","iziToast","flatpickr","ms","days","hours","minutes","seconds"],"mappings":"2GAKA,MAAMA,EAAW,SAAS,cAAc,QAAQ,EAC1CC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAW,SAAS,cAAc,gBAAgB,EAClDC,EAAW,SAAS,cAAc,gBAAgB,EACxD,MAAMC,CAAM,CACV,YAAYC,EAAWC,EAAe,CACpC,KAAK,WAAa,KAClB,KAAK,YAAcD,CACpB,CACD,OAAQ,CACN,KAAK,WAAa,YAAY,IAAM,CAClC,MAAME,EAAO,KAAK,cAAgB,KAAK,IAAG,EAC1CP,EAAU,YAAcQ,EAAS,KAAK,YAAYD,CAAI,EAAE,IAAI,EAE5DN,EAAW,YAAc,KAAK,YAAYM,CAAI,EAAE,MAChDL,EAAS,YAAc,KAAK,YAAYK,CAAI,EAAE,QAC9CJ,EAAS,YAAc,KAAK,YAAYI,CAAI,EAAE,OAC/C,EAAE,GAAI,CACR,CACD,eAAgB,CACd,cAAc,KAAK,UAAU,CAC9B,CACH,CAEAR,EAAS,iBAAiB,QAAS,IAAM,CACvCU,EAAM,MAAK,CACb,CAAC,EAED,SAASD,EAASE,EAAQ,CACxB,OAAOA,EAAO,SAAU,EAAC,SAAS,EAAG,GAAG,CAC1C,CAEA,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQL,EAAe,CACrBG,EAAM,cAAgBH,EAAc,GAChCG,EAAM,cAAgB,KAAK,IAAG,GAChCV,EAAS,SAAW,GACpBa,EAAS,KAAK,CACZ,MAAO,MACP,QAAS,oCACjB,CAAO,EACD,QAAQ,IAAIA,CAAQ,GAEpBb,EAAS,SAAW,EAEvB,CACH,EAEc,SAAS,cAAc,kBAAkB,EAC5Cc,EAAU,mBAAoBF,CAAO,EAEhD,SAASN,EAAUS,EAAI,CAKrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,MAAMT,EAAQ,IAAIL,EAAMC,CAAS"}